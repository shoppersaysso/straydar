'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _cloudinaryCore = require('cloudinary-core');

var _cloudinaryCore2 = _interopRequireDefault(_cloudinaryCore);

var _CloudinaryComponent2 = require('../CloudinaryComponent');

var _CloudinaryComponent3 = _interopRequireDefault(_CloudinaryComponent2);

var _Util = require('../../Util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A component representing a Cloudinary served image
 */
var Image = function (_CloudinaryComponent) {
  _inherits(Image, _CloudinaryComponent);

  function Image(props, context) {
    _classCallCheck(this, Image);

    function defaultBreakpoints(width) {
      var steps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

      return steps * Math.ceil(width / steps);
    }

    var _this = _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).call(this, props, context));

    _this.handleResize = _this.handleResize.bind(_this);

    var state = { responsive: false, url: "", breakpoints: defaultBreakpoints };
    _this.state = Object.assign(state, _this.prepareState(props, context));
    return _this;
  }

  /**
   * Retrieve the window or default view of the current element
   * @returns {DocumentView|*}
   * @private
   */


  _createClass(Image, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !((0, _Util.equals)(this.props, nextProps) && (0, _Util.equals)(this.state, nextState));
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      var state = this.prepareState(nextProps, nextContext);
      this.setState(state);
    }

    /**
     * Generate update state of this element
     * @param {Object} [props=this.props]
     * @param {Object} [context=this.context]
     * @returns {Object} state updates
     * @private
     */

  }, {
    key: 'prepareState',
    value: function prepareState() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;

      var options = _CloudinaryComponent3.default.normalizeOptions(context, props);
      var url = this.getUrl(options);
      var state = {};
      if (options.breakpoints !== undefined) {
        state.breakpoints = options.breakpoints;
      }
      if (options.responsive) {
        state.responsive = true;
        url = this.cloudinary_update(url, state);
      }

      var currentState = this.state || {};
      if (!_cloudinaryCore.Util.isEmpty(url) && url !== currentState.url) {
        state.url = url;
      }
      return state;
    }
  }, {
    key: 'handleResize',
    value: function handleResize(e) {
      var _this2 = this;

      if (this.rqf) return;
      this.rqf = (0, _Util.requestAnimationFrame)(function () {
        _this2.rqf = null;
        var newState = _this2.prepareState();
        if (!_cloudinaryCore.Util.isEmpty(newState.url)) {
          _this2.setState(newState);
        }
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // now that we have a this.element, we need to calculate the URL
      this.handleResize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.element = undefined;
      if (this.listener) {
        this.listener.cancel();
        this.window && this.window.removeEventListener('resize', this.listener);
      }
      this.listener = undefined;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.responsive) {
        var wait = (0, _Util.firstDefined)(nextProps.responsiveDebounce, nextContext.responsiveDebounce, 100);
        if (this.listener) {
          this.window && this.window.removeEventListener('resize', this.listener);
        }
        this.listener = (0, _Util.debounce)(this.handleResize, wait);
        this.window && this.window.addEventListener('resize', this.listener);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _CloudinaryComponent$ = _CloudinaryComponent3.default.normalizeOptions(this.props, this.context),
          publicId = _CloudinaryComponent$.publicId,
          responsive = _CloudinaryComponent$.responsive,
          responsiveDebounce = _CloudinaryComponent$.responsiveDebounce,
          children = _CloudinaryComponent$.children,
          options = _objectWithoutProperties(_CloudinaryComponent$, ['publicId', 'responsive', 'responsiveDebounce', 'children']);

      var attributes = _cloudinaryCore2.default.Transformation.new(options).toHtmlAttributes();
      return _react2.default.createElement('img', _extends({}, attributes, { src: this.state.url, ref: function ref(e) {
          _this3.element = e;
        } }));
    }

    // Methods from cloudinary_js

  }, {
    key: 'findContainerWidth',
    value: function findContainerWidth() {
      var containerWidth, style;
      containerWidth = 0;
      var element = this.element;
      while ((0, _Util.isElement)(element = element != null ? element.parentNode : void 0) && !containerWidth) {
        style = this.window ? this.window.getComputedStyle(element) : '';
        if (!/^inline/.test(style.display)) {
          containerWidth = _cloudinaryCore.Util.width(element);
        }
      }
      return containerWidth;
    }
  }, {
    key: 'applyBreakpoints',
    value: function applyBreakpoints(width, steps, options) {
      var responsive_use_breakpoints;
      options = _CloudinaryComponent3.default.normalizeOptions(this.context, this.props, options);
      responsive_use_breakpoints = options.responsive_use_breakpoints;
      if (!responsive_use_breakpoints || responsive_use_breakpoints === 'resize' && !options.resizing) {
        return width;
      } else {
        return this.calc_breakpoint(width, steps);
      }
    }
  }, {
    key: 'calc_breakpoint',
    value: function calc_breakpoint(width, steps) {
      var breakpoints, point;
      breakpoints = this.state.breakpoints || defaultBreakpoints;
      if (_cloudinaryCore.Util.isFunction(breakpoints)) {
        return breakpoints(width, steps);
      } else {
        if (_cloudinaryCore.Util.isString(breakpoints)) {
          breakpoints = function () {
            var j, len, ref, results;
            ref = breakpoints.split(',');
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              point = ref[j];
              results.push(parseInt(point));
            }
            return results;
          }().sort(function (a, b) {
            return a - b;
          });
        }
        return (0, _Util.closestAbove)(breakpoints, width);
      }
    }
  }, {
    key: 'device_pixel_ratio',
    value: function device_pixel_ratio() {
      var roundDpr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var dpr, dprString;
      dpr = (typeof this.window !== "undefined" && this.window !== null ? this.window.devicePixelRatio : void 0) || 1;
      if (roundDpr) {
        dpr = Math.ceil(dpr);
      }
      if (dpr <= 0 || isNaN(dpr)) {
        dpr = 1;
      }
      dprString = dpr.toString();
      if (dprString.match(/^\d+$/)) {
        dprString += '.0';
      }
      return dprString;
    }
  }, {
    key: 'updateDpr',
    value: function updateDpr(dataSrc, roundDpr) {
      return dataSrc.replace(/\bdpr_(1\.0|auto)\b/g, 'dpr_' + this.device_pixel_ratio(roundDpr));
    }
  }, {
    key: 'maxWidth',
    value: function maxWidth(requiredWidth) {
      var imageWidth;
      imageWidth = this.state.width || 0;
      if (requiredWidth > imageWidth) {
        imageWidth = requiredWidth;
        this.setState({ width: requiredWidth });
      }
      return imageWidth;
    }
  }, {
    key: 'cloudinary_update',
    value: function cloudinary_update(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var requiredWidth;
      var match;
      var resultUrl = this.updateDpr(url, options.roundDpr);
      if (options.responsive || this.state && this.state.responsive) {
        var containerWidth = this.findContainerWidth();
        if (containerWidth !== 0) {
          if (/w_auto:breakpoints/.test(resultUrl)) {
            requiredWidth = this.maxWidth(containerWidth, this.element);
            resultUrl = resultUrl.replace(/w_auto:breakpoints([_0-9]*)(:[0-9]+)?/, "w_auto:breakpoints$1:" + requiredWidth);
          } else if (match = /w_auto(:(\d+))?/.exec(resultUrl)) {
            requiredWidth = this.applyBreakpoints(containerWidth, match[2], options);
            requiredWidth = this.maxWidth(requiredWidth, this.element);
            resultUrl = resultUrl.replace(/w_auto[^,\/]*/g, "w_" + requiredWidth);
          }
        } else {
          resultUrl = "";
        }
      }
      return resultUrl;
    }
  }, {
    key: 'window',
    get: function get() {
      var windowRef = null;
      if (typeof window !== "undefined") {
        windowRef = window;
      }
      return this.element && this.element.ownerDocument ? this.element.ownerDocument.defaultView || windowRef : windowRef;
    }
  }]);

  return Image;
}(_CloudinaryComponent3.default);

Image.defaultProps = {};
Image.contextTypes = _CloudinaryComponent3.default.contextTypes;
Image.propTypes = _CloudinaryComponent3.default.propTypes;

exports.default = Image;